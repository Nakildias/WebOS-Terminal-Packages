# author: nakildias
# release_date: 23/08/2025
# last_updated: 24/08/2025
# requires_sudo: false
# version: 1.1.0
# size: 2KB

import sys
import os
import json
import time
import requests
import socket

def main():
    # --- Boilerplate to read context from environment ---
    context_str = os.environ.get('WEBOS_CONTEXT')
    if not context_str:
        print("Error: Script must be run within the WebOS terminal.")
        sys.exit(1)
    context = json.loads(context_str)
    args = context.get('args', [])
    # --- End Boilerplate ---

    # --- Argument Parsing ---
    hostname = None
    count = float('inf')  # Default to infinite pings

    if not args or 'help' in args or '-h' in args:
        print("usage: ping [-c count] hostname")
        return

    if '-c' in args:
        try:
            c_index = args.index('-c')
            count = int(args[c_index + 1])
            # Remove the '-c' and its value from args
            args.pop(c_index)
            args.pop(c_index)
        except (ValueError, IndexError):
            print("ping: invalid count specified with -c")
            return

    if not args:
        print("ping: hostname required")
        return

    hostname = args[0]

    # --- Main Ping Logic ---
    try:
        ip_address = socket.gethostbyname(hostname)
        print(f"Pinging {hostname} [{ip_address}] with 32 bytes of data:")
    except socket.gaierror:
        print(f"ping: could not resolve host: {hostname}")
        return

    pings_sent = 0
    try:
        while pings_sent < count:
            start_time = time.time()
            try:
                # We simulate a ping by making a HEAD request.
                requests.head(f"http://{hostname}", timeout=5, allow_redirects=True)
                end_time = time.time()
                elapsed_ms = (end_time - start_time) * 1000
                print(f"Reply from {ip_address}: time={elapsed_ms:.2f}ms")
            except requests.exceptions.RequestException:
                print("Request timed out.")

            pings_sent += 1
            if pings_sent < count:
                time.sleep(1)  # Wait 1 second between pings

    except KeyboardInterrupt:
        # This block is executed when the process is terminated (e.g., Ctrl+C)
        print(f"\n--- {hostname} ping statistics ---")
        print(f"{pings_sent} packets transmitted.")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")

if __name__ == "__main__":
    main()
