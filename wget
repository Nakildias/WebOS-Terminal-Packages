# author: nakildias
# release_date: 24/08/2025
# last_updated: 24/08/2025
# requires_sudo: false
# version: 1.0.0
# size: 1KB

# This is using a buffer file because I couldn't get it to animate the progress without it, I spent 5 hours on this piece of shit

import os
import json
import sys
import requests
import time
import re
import filelock
import threading

BUFFER_FILE = 'terminal_buffer.txt'
file_lock = filelock.FileLock(f"{BUFFER_FILE}.lock")

def write_to_buffer(message, mode='w'):
    with file_lock:
        with open(BUFFER_FILE, mode, encoding='utf-8') as f:
            f.write(message)

def get_safe_path(req_path, user_home):
    """
    Calculates a safe, absolute path within the virtual filesystem.
    """
    bin_dir = os.path.dirname(os.path.abspath(__file__))
    FILESYSTEM_ROOT = os.path.abspath(os.path.join(bin_dir, '..'))
    safe_base = FILESYSTEM_ROOT
    full_path = os.path.abspath(os.path.join(safe_base, req_path.lstrip('/\\')))
    if not full_path.startswith(safe_base):
        return None
    return full_path

def main():
    context_str = os.environ.get('WEBOS_CONTEXT')
    if not context_str:
        write_to_buffer("Error: Script must be run within WebOS.", mode='a')
        sys.exit(1)

    context = json.loads(context_str)
    args = context.get('args', [])
    cwd = context.get('cwd', '/')
    user_home = os.path.join('/home', context['user']['username'])

    if not args:
        write_to_buffer("wget: missing URL")
        sys.exit(1)

    url = args[0]

    try:
        response = requests.get(url, stream=True, timeout=30)
        response.raise_for_status()

        # File Name Logic
        filename = url.split('/')[-1].split('?')[0] or 'index.html'
        if 'content-disposition' in response.headers:
            d = response.headers['content-disposition']
            fname = re.findall("filename=(.+)", d)
            if fname:
                filename = fname[0].strip("\"'")

        filepath = get_safe_path(os.path.join(cwd, filename), user_home)
        if not filepath:
            write_to_buffer("wget: permission denied to save in current directory")
            sys.exit(1)

        total_size = int(response.headers.get('content-length', 0))
        downloaded = 0
        chunk_size = 8192
        start_time = time.time()
        last_print_time = start_time

        write_to_buffer(f"Connecting to {url.split('/')[2]}...\n", mode='w')
        write_to_buffer(f"Saving to: '{filename}'\n", mode='a')

        with open(filepath, 'wb') as f:
            for chunk in response.iter_content(chunk_size=chunk_size):
                if chunk:
                    f.write(chunk)
                    downloaded += len(chunk)
                    current_time = time.time()

                    if current_time - last_print_time > 0.5 or downloaded == total_size:
                        elapsed_time = current_time - start_time
                        speed = downloaded / elapsed_time if elapsed_time > 0 else 0

                        # Human-readable speed
                        if speed > 1024 * 1024:
                            speed_hr = f"{speed / 1024 / 1024:.2f}MB/s"
                        elif speed > 1024:
                            speed_hr = f"{speed / 1024:.2f}KB/s"
                        else:
                            speed_hr = f"{speed:.2f}B/s"

                        if total_size > 0:
                            percent_complete = downloaded / total_size
                            bar_length = 30
                            filled_length = int(bar_length * percent_complete)
                            bar = 'â–ˆ' * filled_length + '-' * (bar_length - filled_length)

                            downloaded_hr = f"{downloaded/1024/1024:.2f}MB" if downloaded > 1024*1024 else f"{downloaded/1024:.2f}KB"
                            total_size_hr = f"{total_size/1024/1024:.2f}MB" if total_size > 1024*1024 else f"{total_size/1024:.2f}KB"

                            progress_str = f'[{bar}] {int(percent_complete * 100)}% ({downloaded_hr}/{total_size_hr}) {speed_hr.ljust(10)}\r'
                        else:
                            downloaded_hr = f"{downloaded/1024/1024:.2f}MB" if downloaded > 1024*1024 else f"{downloaded/1024:.2f}KB"
                            progress_str = f'Downloaded: {downloaded_hr} at {speed_hr.ljust(10)}\r'

                        write_to_buffer(progress_str)
                        last_print_time = current_time

        write_to_buffer(f"\n'{filename}' saved.\n")

    except requests.exceptions.RequestException as e:
        write_to_buffer(f"\nwget: error: {e}")
        sys.exit(1)
    except Exception as e:
        write_to_buffer(f"\nwget: an unexpected error occurred: {e}")
        sys.exit(1)

if __name__ == '__main__':
    main()
