# author: nakildias
# release_date: 24/08/2025
# last_updated: 24/08/2025
# requires_sudo: false
# version: 1.3.0
# size: 3KB

import sys
import os
import json
import platform
import argparse
from datetime import timedelta
from shutil import get_terminal_size

try:
    import psutil
except ImportError:
    psutil = None  # uptime won't be available without psutil


# --- ANSI Colors ---
C_BLUE = '\033[94m'
C_WHITE = '\033[97m'
C_END = '\033[0m'

def colorize(text, color):
    if not sys.stdout.isatty() or os.environ.get("NO_COLOR"):
        return text
    return f"{color}{text}{C_END}"


# --- Info Fetching ---
def get_system_info(username: str, user_home: str, is_admin: bool) -> list[str]:
    privileges = "Admin" if is_admin else "User"

    uptime = "N/A"
    if psutil and hasattr(psutil, "boot_time"):
        from time import time
        seconds = int(time() - psutil.boot_time())
        uptime = str(timedelta(seconds=seconds))

    info = [
        f"{colorize(username, C_BLUE)}{colorize('@WebOS', C_WHITE)}",
        "-----------------",
        f"{colorize('OS:', C_BLUE)} WebOS v1.3",
        f"{colorize('Host:', C_BLUE)} {platform.node()}",
        f"{colorize('Uptime:', C_BLUE)} {uptime}",
        f"{colorize('Shell:', C_BLUE)} {os.environ.get('SHELL', 'WebTerm')}",
        f"{colorize('Home:', C_BLUE)} /{user_home}",
        f"{colorize('Privileges:', C_BLUE)} {privileges}",
    ]
    return info


# --- ASCII Logo ---
def load_logo() -> list[str]:
    return [
        colorize("           ==========           ", C_BLUE),
        colorize("        == ==  =   == ==        ", C_BLUE),
        colorize("      =   =    =    ==  ==      ", C_BLUE),
        colorize("    ==   =     =     ==   ==    ", C_BLUE),
        colorize("   ==========================   ", C_BLUE),
        colorize("   =    =      =       =    =   ", C_BLUE),
        colorize("  =     =      =       =     =  ", C_BLUE),
        colorize("  ============================  ", C_BLUE),
        colorize("  =     =      =       =     =  ", C_BLUE),
        colorize("   =    =      =       =    =   ", C_BLUE),
        colorize("   ==========================   ", C_BLUE),
        colorize("    ==   =     =      =   ==    ", C_BLUE),
        colorize("      ==  =    =     =   =      ", C_BLUE),
        colorize("        == ==  =   == ==        ", C_BLUE),
        colorize("            ========            ", C_BLUE),
    ]


# --- Main Entry ---
def main():
    parser = argparse.ArgumentParser(description="WebOS system fetch tool")
    parser.add_argument("--no-logo", action="store_true", help="Hide ASCII logo")
    parser.add_argument("--debug", action="store_true", help="Show raw context JSON")
    parser.add_argument("--version", action="store_true", help="Show version and exit")
    args = parser.parse_args()

    if args.version:
        print("WebOS Neofetch v1.3.0")
        sys.exit(0)

    # --- Boilerplate Context ---
    context_str = os.environ.get('WEBOS_CONTEXT')
    if not context_str:
        print("Error: Script must be run within the WebOS terminal.")
        sys.exit(1)
    try:
        context = json.loads(context_str)
    except json.JSONDecodeError:
        print("Error: Invalid WEBOS_CONTEXT format.")
        sys.exit(1)

    if args.debug:
        print(json.dumps(context, indent=2))

    session = context.get('session', {})
    user_data = context.get('user', {})
    username = user_data.get('username', 'guest')
    is_admin = user_data.get('is_admin', False)
    user_home = session.get('user_home', f'home/{username}').replace('\\', '/')

    # Collect info
    info = get_system_info(username, user_home, is_admin)
    logo = load_logo() if not args.no_logo else []

    # Merge logo and info
    max_lines = max(len(logo), len(info))
    term_width = get_terminal_size().columns
    for i in range(max_lines):
        logo_line = logo[i] if i < len(logo) else " " * 36
        info_line = info[i] if i < len(info) else ""
        print(f"{logo_line:<40}  {info_line}".rstrip().ljust(term_width))


if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        print(f"neofetch: unexpected error: {e}", file=sys.stderr)
        sys.exit(1)
