# author: nakildias
# version: 1.0.0
# requires_sudo: False
# size: 2KB
# release_date: 2024-06-25
# last_updated: 2024-06-25

import os
import json
import sys

def get_safe_path(req_path, filesystem_root):
    """
    Calculates a safe, absolute path within the virtual filesystem.
    """
    safe_base = os.path.abspath(filesystem_root)
    # The lstrip is important to prevent joining absolute paths
    full_path = os.path.abspath(os.path.join(safe_base, req_path.lstrip('/\\')))
    if not full_path.startswith(safe_base):
        return None
    return full_path

def main():
    context_str = os.environ.get('WEBOS_CONTEXT')
    if not context_str:
        print("Error: Script must be run within WebOS.", file=sys.stderr)
        sys.exit(1)

    context = json.loads(context_str)
    args = context.get('args', [])
    cwd = context.get('cwd', '/')
    user_home = os.path.join('/home', context['user']['username'])

    # Determine filesystem root from the script's own location
    bin_dir = os.path.dirname(os.path.abspath(__file__))
    FILESYSTEM_ROOT = os.path.abspath(os.path.join(bin_dir, '..'))

    target_dir = ''
    if not args:
        # If no arguments, the target is the user's home directory
        target_dir = user_home
    else:
        target_dir = args[0]
        # Resolve path relative to the current directory if it's not absolute
        if not os.path.isabs(target_dir):
            target_dir = os.path.join(cwd, target_dir)

    # Normalize the path to resolve '..' and '.'
    potential_new_path = os.path.normpath(target_dir)

    # Get the safe, absolute path on the server's filesystem for validation
    target_path_server = get_safe_path(potential_new_path, FILESYSTEM_ROOT)

    if not target_path_server or not os.path.isdir(target_path_server):
        print(f"cd: no such file or directory: {args[0] if args else '~'}", file=sys.stderr)
        sys.exit(1)

    # If all checks pass, print the resolved virtual path to standard output.
    # The parent process will read this and update the terminal's state.
    print(potential_new_path.replace('\\', '/'))

if __name__ == '__main__':
    main()
